import fs from 'fs/promises';
import { resolve } from 'path';
import nodeExternals from 'rollup-plugin-node-externals';
import { defineConfig } from 'vite';
import circularDependency from 'vite-plugin-circular-dependency';
import dts from 'vite-plugin-dts';

function closeBundlePlugin({ path }) {
    return [
        {
            name: 'closeBundlePlugin',
            async closeBundle() {
                if (!this.meta.watchMode) return;

                this.info(`Bundle closed during watch, updating ${path}`);
                await fs.writeFile(path, `Generated by bundle close event in closeBundlePlugin at ${Date.now()}`, { flush: true });
            }
        }
    ]
}

export default defineConfig({
    build: {
        lib: {
            // Could also be a dictionary or array of multiple entry points
            // eslint-disable-next-line no-undef
            entry: resolve(__dirname, './src/index.ts'),
            fileName: 'index',
            name: 'index',
            formats: ['es'],
        },
        outDir: 'dist',
        minify: false,
        rollupOptions: {
        },
        target: "ESNext",
    },
    test: {
        poolOptions: {
            forks: {
                execArgv: ["--expose-gc"]
            }
        },
    },
    plugins: [dts({ clearPureImport: false }), nodeExternals(), circularDependency({ circleImportThrowErr: true }), closeBundlePlugin({ path: 'dist/build-complete.notice' })]
});
